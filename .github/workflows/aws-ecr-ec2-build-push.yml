name: Build and Deploy Docker Image to AWS ECR and EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > deploy_key
          chmod 600 deploy_key

          echo "Connecting to EC2 and deploying the container..."
          ssh -o StrictHostKeyChecking=no -i deploy_key ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} << EOF
            export AWS_REGION="${AWS_REGION}"
            export ECR_REGISTRY="${ECR_REGISTRY}"
            export ECR_REPOSITORY="${ECR_REPOSITORY}"
            export IMAGE_TAG="${IMAGE_TAG}"

            echo "Logging in to ECR..."
            aws ecr get-login-password --region \$AWS_REGION | docker login --username AWS --password-stdin \$ECR_REGISTRY

            echo "Pulling image..."
            docker pull \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAG

            echo "Stopping existing container (if any)..."
            docker stop react-app || true
            docker rm react-app || true

            echo "Running new container..."
            docker run -d --name react-app -p 80:80 \$ECR_REGISTRY/\$ECR_REPOSITORY:\$IMAGE_TAG
          EOF
